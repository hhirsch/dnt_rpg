# DccNiTghtmare is public domain. Do whatever you want with this code.

CFLAGS = @CPPFLAGS@ -g -c -Wall -O2
CC = @CXX@
CPP= @CXX@
LDFLAGS = @LDFLAGS@
LIBS= @LIBS@
EFLAGS = @CPPFLAGS@ $(LDFLAGS) $(LIBS)

ENDCLASSES=../classes/

all: animodel.o btree.o btreecell.o defparser.o distance.o dirs.o extensions.o message3d.o modellist.o npcfile.o overlaps.o shader.o texrenderer.o userinfo.o

animodel.o: animodel.h animodel.cpp $(ENDCLASSES)thing.h dirs.h overlaps.h
	@printf "Making animodel.o... "
	@$(CPP) $(CFLAGS) -c animodel.cpp -o animodel.o
	@printf "\e[0;32mDone.\e[0;0m\n"

btree.o: btree.h btree.cpp
	@printf "Making btree.o... "
	@$(CPP) $(CFLAGS) -c btree.cpp -o btree.o
	@printf "\e[0;32mDone.\e[0;0m\n"

btreecell.o: btreecell.h btreecell.cpp
	@printf "Making btreecell.o... "
	@$(CPP) $(CFLAGS) -c btreecell.cpp -o btreecell.o
	@printf "\e[0;32mDone.\e[0;0m\n"

defparser.o: defparser.h defparser.cpp
	@printf "Making defparser.o... "
	@$(CPP) $(CFLAGS) -c defparser.cpp -o defparser.o
	@printf "\e[0;32mDone.\e[0;0m\n"

distance.o: distance.h distance.cpp
	@printf "Making distance.o... "
	@$(CPP) $(CFLAGS) -c distance.cpp -o distance.o
	@printf "\e[0;32mDone.\e[0;0m\n"

dirs.o: dirs.h dirs.cpp
	@printf "Making dirs.o... "
	@$(CPP) $(CFLAGS) -c dirs.cpp -o dirs.o
	@printf "\e[0;32mDone.\e[0;0m\n"

extensions.o: extensions.h extensions.cpp
	@printf "Making extensions.o... "
	@$(CPP) $(CFLAGS) -c extensions.cpp -o extensions.o
	@printf "\e[0;32mDone.\e[0;0m\n"

message3d.o: message3d.cpp message3d.h
	@printf "Making message3d.o... "
	@$(CPP) $(CFLAGS) -c message3d.cpp -o message3d.o
	@printf "\e[0;32mDone.\e[0;0m\n"

modellist.o: modellist.h modellist.cpp animodel.h
	@printf "Making modellist.o... "
	@$(CPP) $(CFLAGS) -c modellist.cpp -o modellist.o
	@printf "\e[0;32mDone.\e[0;0m\n"

npcfile.o: npcfile.cpp npcfile.h dirs.h
	@printf "Making npcfile.o... "
	@$(CPP) $(CFLAGS) -c npcfile.cpp -o npcfile.o
	@printf "\e[0;32mDone.\e[0;0m\n"

overlaps.o: overlaps.cpp overlaps.h
	@printf "Making overlaps.o... "
	@$(CC) $(CFLAGS) overlaps.cpp -o overlaps.o
	@printf "\e[0;32mDone.\e[0;0m\n"

shader.o: shader.cpp shader.h dirs.h extensions.h
	@printf "Making shader.o... "
	@$(CC) $(CFLAGS) shader.cpp -o shader.o
	@printf "\e[0;32mDone.\e[0;0m\n"

texrenderer.o: texrenderer.h texrenderer.cpp btree.h btreecell.h
	@printf "Making texrenderer.o... "
	@$(CPP) $(CFLAGS) -c texrenderer.cpp -o texrenderer.o
	@printf "\e[0;32mDone.\e[0;0m\n"

userinfo.o: userinfo.h userinfo.cpp
	@printf "Making userinfo.o... "
	@$(CPP) $(CFLAGS) -c userinfo.cpp -o userinfo.o
	@printf "\e[0;32mDone.\e[0;0m\n"

clean:
	@printf "Cleaning Etc Bin Files... "
	@\rm -rf *.o fifo
	@printf "\e[0;32mDone.\e[0;0m\n"
